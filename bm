#!/bin/fish

# create path config file
if not [ -f /etc/bookmarks.conf ]
    if not [ (id -u) -eq 0 ]
        echo "To create the configuration, run \"sudo bm\"."
        exit 1
    end
    touch /etc/bookmarks.conf
    echo (eval echo "~$SUDO_USER")/Bookmarks | sudo tee -a /etc/bookmarks.conf > /dev/null
    echo "Your config has been created. Run again without sudo to begin using bookmarks."
    exit 0
end

if [ (id -u) -eq 0 ]
    echo "Hey, why are you root? Exiting..."
    exit 1
end

# (!) Multiple users are currently not supported. You may modify this line for
# it. 
set P (cat /etc/bookmarks.conf)

set BOOKMARKS_PATH $P/list
set BOOKMARS_DATE_PATH $P/list-date

# check if file already exists
if [ -f $BOOKMARKS_PATH ]
    
else 
    echo Your bookmarks file has been created in $BOOKMARKS_PATH
    mkdir $P
    touch $BOOKMARKS_PATH
    touch $BOOKMARS_DATE_PATH
end

# reset all files
function reset
    rm -rf $BOOKMARKS_PATH
    rm -rf $BOOKMARS_DATE_PATH
    touch $BOOKMARKS_PATH
    touch $BOOKMARS_DATE_PATH
    exit 0
end

# check if error
if not [ -f $BOOKMARS_DATE_PATH ]
    echo "Fatal: You don't have date file. Do you want to generate it?"
    read choice
    switch $choice
        case "yes"
            touch $BOOKMARS_DATE_PATH
            for i in (seq 1 (wc -l < $BOOKMARKS_PATH))
                echo "Unknown date" >> $BOOKMARS_DATE_PATH
            end
        case "*"
            echo "Ok..."
    end
end

if [ (wc -l < $BOOKMARS_DATE_PATH) -ne (wc -l < $BOOKMARKS_PATH) ]
    echo "Fatal: Your bookmark dates seem to be not synchronized. Do you want to reset your bookmarks?"
    read choice
    switch $choice
        case "yes"
            reset
        case "*"
            echo "What...?"
    end
end

function add_date_and_then_display
    switch $option
        case "cli"
            read new
            echo -e "$new" >> $BOOKMARKS_PATH
        case "argumented"
            echo -e "$arguments" >> $BOOKMARKS_PATH
    end
    echo (date "+%d/%m/%Y %H:%M") >> $BOOKMARS_DATE_PATH
    echo "added \"$arguments\" to line $(wc -l < $BOOKMARKS_PATH)"
end

function delete
    set saved_text (string split \n (cat $BOOKMARKS_PATH))
    set saved_date (string split \n (cat $BOOKMARS_DATE_PATH))
    switch $option
        case "cli"
            set -e saved_text[$which]
            set -e saved_date[$which]
        case "argumented"
            set -e saved_text[$arguments2]
            set -e saved_date[$arguments2]
    end
    rm $BOOKMARKS_PATH
    rm $BOOKMARS_DATE_PATH
    touch $BOOKMARKS_PATH
    touch $BOOKMARS_DATE_PATH
    for i in $saved_text
        printf "%s\n" $i >> $BOOKMARKS_PATH
    end
    for i in $saved_date
        printf "%s\n" $i >> $BOOKMARS_DATE_PATH
    end
    printf "Bookmark deleted successfully.\n"
end

function list
    set x (string split \n (cat $BOOKMARKS_PATH))
    set d (string split \n (cat $BOOKMARS_DATE_PATH))
    echo ""
    switch $option
        case "short"
            for i in (seq 1 (count $x))
                echo \u001b[33m$i.\u001b[0m $x[$i]
            end
        case "long"
        for i in (seq 1 (count $x))
            echo \u001b[33m$i.\u001b[31m$d[$i]\u001b[0m $x[$i]
        end
    end
    echo ""
end

if count $argv > /dev/null
    if string match -q -- '-*' $argv[1]
        switch $argv[1]
            case -h or --help
                echo 
                echo "  -h --help Help."
                echo "  -l --list To list all the bookmarks. Uppercase -L for times."
                echo "  -r --recent Show the last bookmark."
                echo "  -d --delete Delete the last bookmark."
                echo "  -t --time Show the time of creation."
                echo "  -p --path Show path."
                echo "  -x --done Mark as done."
                echo "  (no args): to enter the CLI."
                echo "  (just text): for saving a bookmark."
                echo
            case -t or --time
                sed ''$argv[2]'!d' $BOOKMARS_DATE_PATH
            case -l or --list
                set option "short"
                list
            case -L
                set option "long"
                list
            case -r or --recent
                echo (wc -l < $BOOKMARKS_PATH). (tail -1 $BOOKMARKS_PATH)
            case -d or --delete
                if not set -q argv[2]
                    sed -i '$ d' $BOOKMARKS_PATH
                    sed -i '$ d' $BOOKMARS_DATE_PATH
                    echo "Last bookmark deleted successfully."
                else
                    set lines (wc -l < $BOOKMARKS_PATH)

                    if [ $argv[2] -gt $lines ]
                        echo "That bookmark doesn't exit."
                    else
                        set option "argumented"
                        set arguments2 $argv[2]
                        delete
                    end
                end
            case "-x" or "--done"
                set new (sed ''$argv[2]'!d' $BOOKMARKS_PATH)
                sed -i ''$argv[2]'s/.*/(done) '$new'/' $BOOKMARKS_PATH
            case "-p" or "--path"
                echo (cat /etc/bookmarks.conf)
            case "-*"
                echo "You can't add -."
        end
    else
        set option "argumented"
        set arguments $argv
        add_date_and_then_display
    end
    
else
    while true

    echo 1 - New
    echo 2 - List
    echo 3 - Delete
    echo 4 - Modify
    echo "[] - Exit"

    read u
    switch $u
        case 1
            set option "cli"
            add_date_and_then_display
        case 2 
            set option "long"
            list
        case 3
            echo "Which?"
            read which

            set lines (wc -l < $BOOKMARKS_PATH)

            if [ $which -gt $lines ]
                echo "That bookmark doesn't exit."
            else
                set option "cli"
                delete
            end
        case 4
            echo "Which?"
            read which

            set lines (wc -l < $BOOKMARKS_PATH)

            if [ $which -gt $lines ]
                echo "That bookmark doesn't exit."
            else
                set saved_text (string split \n (cat $BOOKMARKS_PATH))
                echo "Insert new content."
                echo {$saved_text[$which]}
                read what
                set saved_text[$which] $what

                rm $BOOKMARKS_PATH
                touch $BOOKMARKS_PATH
                for i in $saved_text
                    printf "%s\n" $i >> $BOOKMARKS_PATH
                end
                printf "Bookmark modified successfully.\n"
            end
        case 5
            exit 0
        case ""
            exit 0 
        end
    end
end
